# Logstash config file to parse scan results from Strelka (https://github.com/target/strelka) on Security Onion#
# Author: Wes Lambert, wlambertts@gmail.com
#
# Updated by Wes Lambert and Dustin Lee
#
# Last Update: 10/30/2018

filter {
  if "strelka" in [tags] {

    # Parse initial message
    json {
      source => "message"
    }
    
    # Extract and rename exiftoolMetadata stuff
    if [exiftool][exiftool] {
      ruby {
      	code => "event.get('[exiftool][exiftool]').each {|hash| event.set(hash['field'].downcase, hash['value']) };"
      }
      mutate {
        rename => { "characterset" => "character_set" }
        rename => { "codesize" => "code_size" }
        rename => { "companyname" => "company_name" }
	rename => { "exiftoolversion" => "exiftool_version" }
        rename => { "filedescription" => "file_description" }
        rename => { "fileflags" => "file_flags" }
        rename => { "fileflagsmask" => "file_flags_mask" }
        rename => { "fileos" => "file_os" }
        rename => { "filesize" => "file_size" }
        rename => { "filesubtype" => "file_subtype" }
        rename => { "filetypeextension" => "filetype_extension" }
        rename => { "fileversionnumber" => "fileversion_number" }
        rename => { "imageversion" => "image_version" }
        rename => { "initializeddatasize" => "initialized_datasize" }
        rename => { "linkerversion" => "linker_version" }
        rename => { "mimetype" => "file_mimetype" }
        rename => { "objectfiletype" => "object_filetype" }
        rename => { "originalfilename" => "original_filename" }
        rename => { "petype" => "pe_type" }
        rename => { "productversionnumber" => "productversion_number" }
        rename => { "sourcefile" => "productversion_number" }
        rename => { "subsystemversion" => "subsystem_version" }
        rename => { "uninitializeddatasize" => "uninitialized_datasize" }
        # Entrypoint is redundant and file attributes are bogus given extraction
        remove_field => [ "entrypoint", "fileaccessdate", "fileinodechangedate", "filemodifydate", "filepermissions", "machinetype" ]
      }
    }
    
    # Move some stuff around
    mutate {
      # If Redis input
      replace => { "type" => "strelka" }
      # If Standalone
      #add_field => { "type" => "strelka" }
      # Begin map of scan_entropy.py
      rename => { "[entropyMetadata][entropy]" => "md_entropy" }
      # Begin map of scan_self.py
      rename => { "[self_metadata][location]" => "source_location" }
      rename => { "[self_metadata][depth]" => "source_depth" }
      rename => { "[self_metadata][uid]" => "source_uid" }
      rename => { "[self_metadata][parent_uid]" => "source_parentuid" }
      rename => { "[self_metadata][root_uid]" => "source_rootuid" }
      rename => { "[self_metadata][hash]" => "source_hash" }
      rename => { "[self_metadata][parent_hash]" => "source_parenthash" }
      rename => { "[self_metadata][root_hash]" => "source_roothash" }
      #rename => { "[results][0][selfMetadata][source]" => "source_source" }
      rename => { "[self_metadata][scanner_list]" => "source_scannerlist" }
      rename => { "[self_metadata][size]" => "source_size" }
      # Begin map of scan_hash.py
      rename => { "[hash_metadata][md5]" => "md5" }
      rename => { "[hash_metadata][sha1]" => "sha1" }
      rename => { "[hash_metadata][sha256]" => "sha256" }
      rename => { "[hash_metadata][ssdeep]" => "ssdeep" }
      # Begin map of scan_pe.py
      rename => { "[pe_metadata][dll_characteristics]" => "dll_characteristics" }
      rename => { "[pe_metadata][entry_point]" => "entry_point" }
      rename => { "[pe_metadata][export_functions]" => "export_functions" }
      rename => { "[pe_metadata][heap_commit_size]" => "heap_commitsize" }
      rename => { "[pe_metadata][heap_reserve_size]" => "heap_reservesize" }
      rename => { "[pe_metadata][image_base]" => "image_base" }
      rename => { "[pe_metadata][image_characteristics]" => "image_characteristics" }
      rename => { "[pe_metadata][image_magic]" => "image_magic" }
      rename => { "[pe_metadata][imphash]" => "imphash" }
      rename => { "[pe_metadata][import_functions]" => "import_functions" }
      rename => { "[pe_metadata][imports]" => "imports" }
      rename => { "[pe_metadata][machine][type]" => "machine_type" }
      rename => { "[pe_metadata][machine][id]" => "machine_id" }
      rename => { "[pe_metadata][nb10]" => "nb10" }
      rename => { "[pe_metadata][resources]" => "resources" }
      rename => { "[pe_metadata][rsds]" => "rsds" }
      rename => { "[pe_metadata][sections]" => "sections" }
      rename => { "[pe_metadata][stack_commit_size]" => "stack_commit_size" }
      rename => { "[pe_metadata][stack_reserve_size]" => "stack_reserve_size" }
      rename => { "[pe_metadata][subsystem]" => "subsystem" }
      rename => { "[pe_metadata][timestamp]" => "fileheader_timestamp" }
      rename => { "[pe_metadata][total][sections]" => "total_sections" }
      rename => { "[pe_metadata][warnings]" => "warnings" }
      # Begin map of scan_header.py
      rename => { "[header_metadata][header]" => "md_header" }
      # Begin map of flavors in distribution.py
      rename => { "[flavors][mime]" => "mimetype" }
      rename => { "[flavors][yara]" => "flavors_yara" }
      rename => { "[flavors][external]" => "external" }
    }
    # Check filename type, convert, and add field if needed 
    if [self_metadata][filename] =~ /Scan.*/ {
        mutate {
      	    rename => { "[self_metadata][filename]" => "filename" }    
	}
    } else {
        mutate {
	    rename => { "[self_metadata][filename]" => "extracted_filename" }
	    add_field => { "parse_filename" => "%{extracted_filename}" }
	}
    }
    # Parse bro source and fuid based on file-extraction naming convention
    if [parse_filename] {
        mutate {
            #add_field => { "parse_filename" => "%{extracted_filename}" }
            gsub => [ "parse_filename", "\.", "-" ]
            split => [ "parse_filename" , "-"]
            add_field => [ "source", "%{[parse_filename][0]}" ]
            add_field => [ "fuid", "%{[parse_filename][1]}" ]
        }
    }
    # Get rid of this stuff
    mutate {
      remove_field => [ "[exiftool]", "[self_metadata]", "[hash_metadata]", "[pe_metadata]", "[header_metadata]", "[flavors]", "[entropy_metadata]" ]
      remove_field => [ "host", "results", "sourcefile", "directory", "filename" , "source", "message", "parse_filename" ]
      remove_tag => [ "beat" ]
    }
  }
}
